# -*- coding: utf-8 -*-
"""GitHub Data Collector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yvtbmzSsXxpUO5ecfp8PomCtm9fTExny
"""

# import requests
# from flask import Flask, request, jsonify

# app = Flask(__name__)

# # GitHub API endpoint
# BASE_URL = "https://api.github.com"

# # GitHub personal access token
# GITHUB_TOKEN = "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"

# # Data Processing Microservice URL
# # DATA_PROCESSING_MICROSERVICE_URL = "http://127.0.0.1:5002/process-and-calculate"

# # Repository information
# username = "MohamedSabthar"
# repo = "Smart-VAT"

# # Define the headers with the authentication token
# headers = {
#     "Authorization": f"token {GITHUB_TOKEN}"
# }

# # Function to fetch the list of contributors for a repository from the GitHub API
# def fetch_contributors(username, repo):
#     endpoint = f"repos/{username}/{repo}/contributors"
#     contributors_data = fetch_github_data(endpoint)
#     return contributors_data

# # Function to fetch data from GitHub
# def fetch_github_data(endpoint):
#     url = f"{BASE_URL}/{endpoint}"
#     response = requests.get(url, headers=headers)

#     if response.status_code == 200:
#         return response.json()
#     else:
#         print(f"Error fetching data from GitHub: {response.status_code}")
#         return None

# # Main function to get the list of contributors for a repository
# def get_contributor_list(username, repo):
#     contributors = fetch_contributors(username, repo)

#     if contributors:
#         contributor_list = [contributor['login'] for contributor in contributors]
#         print("List of Contributors:")
#         for contributor in contributor_list:
#             print(contributor)
#         return contributor_list
#     else:
#         print("Failed to fetch contributors.")
#         return []

# # Example usage
# contributor_list = get_contributor_list(username, repo)

# # Function to fetch data from the GitHub API
# def fetch_github_data(endpoint, username, repo, params=None):
#     url = f"{BASE_URL}/repos/{username}/{repo}/{endpoint}"
#     # response = requests.get(url, headers={'Authorization': 'Bearer YOUR_GITHUB_ACCESS_TOKEN'}, params=params)
#     response = requests.get(url, headers=headers, params=params)

#     if response.status_code == 200:
#         return response.json()
#     else:
#         print(f"Error fetching data from GitHub: {response.status_code}")
#         return None

# # Route to collect data for a set of developers
# @app.route('/collect-developer-metrics', methods=['POST'])
# def collect_developer_metrics():
#     data = request.json
#     username = data.get('username')
#     repo = data.get('repo')
#     developers = data.get('developers')

#     if not username or not repo or not developers:
#         return jsonify({"error": "Invalid request. Please provide 'username', 'repo', and 'developers' in the request body."}), 400

#     metrics_data = {}
#     for developer in developers:
#         # Fetch commit count
#         commits_data = fetch_github_data('commits', username, repo, params={"author": developer})
#         commit_count = len(commits_data) if commits_data else 0

#         # Fetch issues (including resolved ones)
#         issues_data = fetch_github_data('issues', username, repo, params={"creator": developer, "state": "all"})
#         resolved_issues_count = sum(1 for issue in issues_data if issue.get('state') == 'closed')

#         # Fetch pull requests
#         pull_requests_data = fetch_github_data('pulls', username, repo, params={"creator": developer, "state": "all"})
#         pull_requests_count = len(pull_requests_data) if pull_requests_data else 0

#         metrics_data[developer] = {
#             'commit_count': commit_count,
#             'resolved_issues_count': resolved_issues_count,
#             'pull_requests_count': pull_requests_count
#         }

#     return jsonify({"repository": repo, "developer_metrics": metrics_data})

# if __name__ == '__main__':
#     app.run(port=5000)

from flask import Flask, jsonify
from github import Github

app = Flask(__name__)

# Replace with your GitHub API token
GITHUB_API_TOKEN = "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"

owner = "MohamedSabthar"
repo = "Smart-VAT"

# Initialize GitHub API client
github = Github(GITHUB_API_TOKEN)

@app.route('/metrics/<owner>/<repo>', methods=['GET'])
def get_metrics(owner, repo):
    try:
        repository = github.get_repo(f"{owner}/{repo}")

        # Get commits with status 'done'
        commits_done = sum(1 for commit in repository.get_commits())

        # Get closed issues
        issues_closed = sum(1 for issue in repository.get_issues(state='closed'))

        # Get created pull requests
        pull_requests_created = sum(1 for pr in repository.get_pulls(state='all'))

        # Store metrics in the database (replace this with your database logic)

        return jsonify({
            'commits_done': commits_done,
            'issues_closed': issues_closed,
            'pull_requests_created': pull_requests_created
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
